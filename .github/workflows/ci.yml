name: ci

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
        with:
          cosign-release: "v2.2.4"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push app
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign published images
        if: github.event_name != 'pull_request'
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd /var/www/html

            echo "üöÄ Fetching latest repo..."
            if [ ! -d "web/.git" ]; then
              git clone https://github.com/pixelating-community/web.git
              cd web
            else
              cd web
              git fetch --all
              git reset --hard origin/main
            fi

            echo "üìù .env..."
            cat <<EOF > .env
            POSTGRES_USER=postgres
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            BUCKET_NAME=${{ secrets.BUCKET_NAME }}
            BUCKET_REGION=${{ secrets.BUCKET_REGION }}
            BUCKET_URL=${{ secrets.BUCKET_URL }}
            SPACES_KEY=${{ secrets.SPACES_KEY }}
            SPACES_SECRET=${{ secrets.SPACES_SECRET }}
            EL_KEY=${{ secrets.EL_KEY }}
            NEXT_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_URL }}
            NEXT_PUBLIC_CDN_URL=${{ secrets.NEXT_PUBLIC_CDN_URL }}
            NEXT_PUBLIC_PIXEL_SIZE=${{ secrets.NEXT_PUBLIC_PIXEL_SIZE }}
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
            NEXT_SERVER_ACTIONS_ENCRYPTION_KEY=${{ secrets.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
            EOF

            echo "üöÄ images..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            echo "üöÄ app..."
            docker compose -f production.yml --project-name web up -d --force-recreate --pull always --remove-orphans app

            echo "üßº images..."
            docker image prune -f
